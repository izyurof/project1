openapi: 3.0.1
info:
  title: Customer Service - OpenaAPI 3.0
  description:
    Customer Service stores data representing a customer that inquired a product at least once. This data specifies details about a customer, mostly for establishing a communication with.
  version: 0.0.1
servers:
  - url: http://localhost:8080
tags:
  - name: customers
    description: Everything about customer
paths:
  /v1/customers:
    get:
      tags:
        - customer-controller
      operationId: getAllCustomers
      summary: Get all customers with filtering and sorting
      parameters:
        - name: name
          in: query
          description: Filter customers with customer name
          required: false
          schema:
            type: string
        - name: surname
          in: query
          description: Filter customers with customer surname
          required: false
          schema:
            type: string
        - name: countryName
          in: query
          description: Filter customers with customer countryCode
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: The page number to retrieve
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          description: The number of customers per page
          required: false
          schema:
            type: integer
            format: int32
            default: 25
        - name: sortDirection
          in: query
          description: Sorting direction (asc or desc)
          required: false
          schema:
            type: string
      responses:
        '200':
          description: A paginated list of customers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CustomerDto"
    post:
      tags:
        - customer-controller
      operationId: createCustomer
      summary: Create a new customer
      requestBody:
        description: New Customer
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerDto"
        required: true
      responses:
        '201':
          description: Created customer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerDto"
        '400':
          description: BadRequest (validation exception)
  /v1/customers/{id}/update/telegram_id:
    patch:
      tags:
        - customer-controller
      operationId: updateCustomerTelegramId
      summary: Update customer telegram id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updatable customer
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerDto"
        required: true
      responses:
        '204':
          description: Customer updated
        '400':
          description: BadRequest (validation exception)
  /v1/customers/{id}/update/surname:
    patch:
      tags:
        - customer-controller
      operationId: updateCustomerSurname
      summary: Update customer surname
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updatable customer
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerDto"
        required: true
      responses:
        '204':
          description: Customer updated
        '400':
          description: BadRequest (validation exception)
  /v1/customers/{id}/update/name:
    patch:
      tags:
        - customer-controller
      operationId: updateCustomerName
      summary: Update customer name
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updatable customer
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerDto"
        required: true
      responses:
        '204':
          description: Customer updated
        '400':
          description: BadRequest (validation exception)
  /v1/customers/{id}/update/email:
    patch:
      tags:
        - customer-controller
      operationId: updateCustomerEmail
      summary: Update customer email
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updatable customer
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerDto"
        required: true
      responses:
        '204':
          description: Customer updated
        '400':
          description: BadRequest (validation exception)
  /v1/customers/{id}/update/country:
    patch:
      tags:
        - customer-controller
      operationId: updateCustomerCountry
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Updatable customer
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CustomerDto"
        required: true
      responses:
        '204':
          description: Customer updated
        '400':
          description: BadRequest (validation exception)
  /v1/customers/{id}:
    get:
      tags:
        - customer-controller
      operationId: getCustomer
      summary: Get customer by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CustomerDto"
        '404':
          description: Customer not found
components:
  schemas:
    ContactDetailsDto:
      required:
        - email
        - telegramId
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        email:
          pattern: "^(?=.{1,256})(?=.{1,64}@.{1,255}$)(?=.{1,63}\\.[A-Za-z]{2,63}$)(?!.*[.]{2})[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$"
          type: string
          example: "lebowski@gmail.com"
        telegramId:
          pattern: "^@[a-zA-Z0-9_]{4,31}$"
          type: string
          example: "@lebowski"
        createdAt:
          type: string
          format: date-time
          example: "2024-08-13 12:45:09.470912 +00:00"
        updatedAt:
          type: string
          format: date-time
          example: "2024-08-13 12:45:09.470912 +00:00"
    CountryDto:
      required:
        - countryCode
        - id
        - name
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: [1]
        countryCode:
          pattern: "^[A-Z]{3}$"
          maxLength: 3
          minLength: 3
          type: string
          example: "AIA"
        name:
          pattern: "^[A-Z]{3}$"
          maxLength: 60
          minLength: 0
          type: string
          example: "Anguilla"
        createdAt:
          type: string
          format: date-time
          example: "2024-08-13 12:45:09.470912 +00:00"
        updatedAt:
          type: string
          format: date-time
          example: "2024-08-13 12:45:09.470912 +00:00"
    CustomerDto:
      required:
        - contactDetailsDto
        - countryDto
        - name
        - surname
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          maxLength: 30
          minLength: 0
          type: string
          example: "Jeffrey"
        surname:
          maxLength: 30
          minLength: 0
          type: string
          example: "Lebowski"
        countryDto:
          $ref: "#/components/schemas/CountryDto"
        contactDetailsDto:
          $ref: "#/components/schemas/ContactDetailsDto"
        createdAt:
          type: string
          format: date-time
          example: "2024-08-13 12:45:09.470912 +00:00"
        updatedAt:
          type: string
          format: date-time
          example: "2024-08-13 12:45:09.470912 +00:00"
